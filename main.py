#!/usr/bin/env python3
# -*- encoding: utf-8 -*-

import config
import json
import random
import sqlite3
import os
import time

from aiogram import Bot, Dispatcher, executor, types

if not config.TOKEN:
    print("[!] Invalid token!!")
    exit()

queries = {
    "create_table": """
        CREATE TABLE `users`(
                id          INTEGER     PRIMARY KEY NOT NULL,
                username    VARCHAR(35)             NOT NULL,
                name        VARCHAR(255)            NOT NULL,
                length      INTEGER                 NOT NULL,
                endtime     INTEGER                 NOT NULL,
                spamcount   INTEGER                 NOT NULL,
                blacklisted BOOLEAN                 NOT NULL
            );
    """,
    "put_user": """
        INSERT INTO `users`(id,username, name, length, endtime, spamcount, blacklisted)
        VALUES (?,?,?,?,?,?,?)
    """,
    "report_table": """
        CREATE TABLE `reports` (
            group_id    INTEGER        NOT NULL,
            group_name  VARCHAR(255)   NOT NULL,
            user_id      INTEGER        NOT NULL,
            username    VARCHAR(35)    NOT NULL,
            name        VARCHAR(255)   NOT NULL,
            message     TEXT           NOT NULL
        )
    """
}


def to_dict(user_data):
    ass_info = {
        "id": user_data[0],
        "username": user_data[1],
        "name": user_data[2],
        "length": user_data[3],
        "endtime": user_data[4],
        "spamcount": user_data[5],
        "blacklisted": user_data[6]
    }
    return ass_info


def ass_main(ass_info, db, group_id):
    ass_info = to_dict(ass_info)

    if ass_info["endtime"] > int(time.time()):

        last_time = ass_info["endtime"] - int(time.time())
        hours = int(last_time / 3600)
        minutes = int((last_time / 60) - (hours * 60))

        if hours == 0:
            output_message = (
                "@{0}, —Ç–∏ –≤–∂–µ –≥—Ä–∞–≤! –ó–∞—á–µ–∫–∞–π {1} —Ö–≤.".format(ass_info["username"], minutes)
            )
        else:
            if minutes == 0:
                output_message = (
                    "@{0}, —Ç–∏ –≤–∂–µ –≥—Ä–∞–≤! –ó–∞—á–µ–∫–∞–π {1} –≥–æ–¥.".format(ass_info["username"], hours)
                )
            else:
                output_message = (
                    "@{0}, —Ç–∏ –≤–∂–µ –≥—Ä–∞–≤! –ó–∞—á–µ–∫–∞–π {1} –≥–æ–¥., {2} —Ö–≤.".format(ass_info["username"], hours, minutes)
                )

        db.execute("""
            UPDATE `{0}` SET spamcount={1} WHERE user_id={2}
        """.format(group_id, ass_info["spamcount"] + 1, ass_info["id"]))
    else:
        tmp_length = random.randint(-10, 15)
        output_message = "@{0}, —Ç–≤–æ—è –¥—É–ø—Ü—è ".format(ass_info["username"])

        if tmp_length == 0:
            # message with no profit
            output_message += "–Ω–µ –∑–º—ñ–Ω–∏–ª–∞ —Ä–æ–∑–º—ñ—Ä—É. "
        elif tmp_length > 0:
            # message with profit
            output_message += ("–ø—ñ–¥—Ä–æ—Å–ª–∞ –Ω–∞ {0} —Å–º! –ó–∞—Ä–∞–∑ —Ç–≤–æ—è –¥—É–ø—Ü—è –ø—Ä—è–º –±–æ–º–±–µ–∑–Ω–∞. ".format(tmp_length))
        elif tmp_length < 0:
            # message with bad profit
            if not ass_info["length"] - tmp_length <= 0:
                output_message += ("–∑–º–µ–Ω—à–∏–ª–∞—Å—å –Ω–∞ {0} —Å–º! –ó–∞—Ä–∞–∑ —Ç–≤–æ—è –¥—É–ø—Ü—è –≤–∂–µ –Ω–µ —Ñ–∞–π–Ω–∞. ".format(tmp_length * -1))

        ass_info["length"] = ass_info["length"] + tmp_length

        if ass_info["length"] < 0:
            ass_info["length"] = 0
            output_message += "–ó–∞—Ä–∞–∑ —Ç–∏ –Ω–µ –º–∞—î—à –∑–∞–¥—É. "
        else:
            output_message += "\n–ù–∞—Ä–∞–∑—ñ –≤–∞—à–∞ –¥—É–ø–µ–Ω—Ü—ñ—è —Å—Ç–∞–Ω–æ–≤–∏—Ç—å: {0} —Å–º. ".format(ass_info["length"])

        end_time = int(time.time()) + random.randint(3600, 86400)

        last_time = end_time - int(time.time())

        if last_time < 0:
            minutes = ((last_time // 60) - (last_time // 3600) * 60) * -1
            hours = last_time // 3600 * -1
        else:
            minutes = (last_time // 60) - (last_time // 3600) * 60
            hours = last_time // 3600

        output_message += "–ü—Ä–æ–¥–æ–≤–∂—É–π –≥—Ä–∞—Ç–∏ —á–µ—Ä–µ–∑ {0} –≥–æ–¥., {1} —Ö–≤.".format(hours, minutes)
        db.execute("""
                UPDATE `{0}` SET length={1}, endtime={2}, spamcount=0 WHERE user_id={3}
            """.format(group_id, ass_info["length"], end_time, ass_info["id"]))

    return output_message


if "list" in os.listdir("."):
    print("[+] Everything is fine!")
else:
    db = sqlite3.connect("list")
    db.execute(queries["report_table"])
    print("[+] Report table is created successfully!")
    db.commit()
    db.close()

# initialization

bot = Bot(config.TOKEN)
dp = Dispatcher(bot)

# if you want to read from json-file
# content = json.loads(open("dialogs.json", "r", encoding="utf8").read())

content = {
  "start": "\uD83D\uDC4B –í—ñ—Ç–∞—é –≤ –Ω–∞—à—ñ–π –∫–æ–≥–æ—Ä—Ç—ñ, —Ö–ª–æ–ø—á–µ/–¥—ñ–≤—á–∏–Ω–æ!\n–¶–µ–π –±–æ—Ç–∏–∫ –¥–æ–ø–æ–º–æ–∂–µ —Ç–æ–±—ñ —Ñ–∞–π–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—ñ–ª—å–Ω–∏–π —á–∞—Å, –≥—Ä–∞—é—á–∏—Å—å —ñ–∑ —Ä–æ–∑–º—ñ—Ä–∞–º–∏ —Ç–≤–æ—ó—Ö —è–≥—ñ–¥–æ–∫. –°–∫–æ—Ä—ñ—à–µ –ø—Ä–∏–π–º–∞–π —É—á–∞—Å—Ç—å, buddy, —Ç–∞ –Ω–µ –∑–≤–æ–ª—ñ–∫–∞–π, –ø–∏—à–∏ /ass",
  "help": "–ù–µ –±—ñ–π—Å—å, –æ—Å—å —É—Å—ñ –∫–æ–º–∞–Ω–¥–∏:\n     \uD83C\uDF51  /ass ‚Äî –∑—ñ–≥—Ä–∞—Ç–∏ –≤ –Ω–∞—à—É –≥—Ä—É\n     \uD83D\uDD34  /help ‚Äî –ø–æ–±–∞—á–∏—Ç–∏ –¥–æ–≤—ñ–¥–∫—É\n     \uD83D\uDEB6\u200D‚ôÇÔ∏è  /leave ‚Äî –ø–æ–∫–∏–Ω—É—Ç–∏ –≥—Ä—É (–£–í–ê–ì–ê! –£–°–Ü –î–ê–ù–ù–Ü –ü–Ü–°–õ–Ø –ü–û–ö–ò–î–ê–ù–ù–Ø –ë–£–î–£–¢–¨ –í–ò–î–ê–õ–ï–ù–Ü!\n     \uD83D\uDE4B\u200D‚ôÇÔ∏è /r –≤–∞—à_–∑–≤—ñ—Ç ‚Äî –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä–æ –Ω–µ–¥–æ–ª—ñ–∫\n     \uD83D\uDCCA /statistic ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ —Ä–µ–π—Ç–∏–Ω–≥ —É—Å—ñ—Ö –≥—Ä–∞–≤—Ü—ñ–≤",
  "admin_help": "–†–µ–∂–∏–º –±–∞—Ç—ñ:\n     /blacklist ‚Äî –≤–∏–≤–æ–¥–∏—Ç—å –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö –ø—ñ–¥–æ—Ä—ñ–≤ \n     /ub {user_id} ‚Äî –≤–∏–¥–∞–ª—è—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –±–∞–Ω—É\n     /show_reports ‚Äî –ø–æ–±–∞—á–∏—Ç–∏ –∑–≤—ñ—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤\n     /clear_reports ‚Äî –æ—á–∏—â—É—î –∑–≤—ñ—Ç–∏"
}


@dp.message_handler(commands=["start"])
async def ass(message: types.Message):
    await message.reply(content["start"])


@dp.message_handler(lambda message: message.text[:2] == "/r")
async def report(message: types.Message):

    if len(message.text[3:]) < 10:
        if len(message.text[3:].strip()) == 0:
            await message.reply("–¢–∏ –∑–∞–±—É–≤ —É–≤–≤–µ—Å—Ç–∏ —Å–≤—ñ–π –∑–≤—ñ—Ç!")
        else:
            await message.reply("–ó–≤—ñ—Ç –¥—É–∂–µ –º–∞–ª–∏–π!")
    else:
        data = (message.chat["id"], message.chat["title"], message.from_user["id"], message.from_user["username"], message.from_user["first_name"], message.text[3:])
        db = sqlite3.connect("list")
        db.execute("""
            INSERT INTO `reports` (group_id, group_name, user_id, username, name, message)
            VALUES (?, ?, ?, ?, ?, ?)
        """, data)
        db.commit()
        db.close()
        await message.reply("–î—è–∫—É—î–º–æ –∑–∞ –∑–≤—ñ—Ç! üíõ")
        print("[R] A report had sent!")


@dp.message_handler(commands=["ass"])
async def ass(message: types.Message):
    db = sqlite3.connect("list")

    group_id = message.chat["id"] * -1
    try:
        db.execute("SELECT * FROM `%d`" % group_id )
    except sqlite3.OperationalError:
        # creating table with name by group_id

        db.execute("""
        CREATE TABLE `%d`(
                user_id          INTEGER     PRIMARY KEY NOT NULL,
                username    VARCHAR(35)             NOT NULL,
                name        VARCHAR(255)            NOT NULL,
                length      INTEGER                 NOT NULL,
                endtime     INTEGER                 NOT NULL,
                spamcount   INTEGER                 NOT NULL,
                blacklisted BOOLEAN                 NOT NULL
            );""" % group_id)

        db.commit()
        db.close()
        print("[+] Table with name '%d' created successfully!" % group_id)

    if message.chat["type"] == "private" or message.chat["id"] in config.SUPER_USERS:
        await message.answer("–Ø –ø—Ä–∞—Ü—é—é –ª–∏—à–µ –≤ –≥—Ä—É–ø–ø–∞—Ö!")
    else:
        group_id = message.chat["id"]*-1
        user_id = message.from_user["id"]
        username = message.from_user["username"]
        first_name = message.from_user["first_name"]

        db = sqlite3.connect("list")
        # if user exists in database

        cursor = db.execute("""
        SELECT * FROM `{0}` WHERE user_id={1}
        """.format(group_id, user_id))
        ass_info = cursor.fetchone()

        if ass_info is None:
            userinfo = (user_id, username, first_name, 0, 0, 0, 0)
            db.execute("""
                INSERT INTO `%d`(user_id, username, name, length, endtime, spamcount, blacklisted)
                VALUES (?,?,?,?,?,?,?)
            """ % group_id, userinfo)

            cursor = db.execute("""
            SELECT * FROM `{0}` WHERE user_id={1}
            """.format(group_id, user_id))
            ass_info = cursor.fetchone()
            await message.reply("@{0}, –≤—ñ—Ç–∞—é –≤ –Ω–∞—à—ñ–π –∫–æ–≥–æ—Ä—Ç—ñ, —Ö–ª–æ–ø—á–µ/–¥—ñ–≤—á–∏–Ω–æ".format(ass_info[1]))
            await message.reply(ass_main(ass_info, db, group_id))
        else:
            if int(time.time()) >= ass_info[4]:
                await message.reply(ass_main(ass_info, db, group_id))
            else:
                if not ass_info[6]:
                    if ass_info[5] != 6:
                        await message.reply(ass_main(ass_info, db, group_id))
                    else:
                        db.execute("""
                            UPDATE `{0}` SET blacklisted=1, length=0 WHERE user_id={1}
                        """.format(group_id, user_id))
                        await message.reply("%s, —è —Ç–æ–±—ñ –ø–æ–ø–∫—É –∑–±—ñ–ª—å—à—É—é, –∞ —Ç–∏ –º–µ–Ω—ñ —Å–ø–∞–º–∏—à. –ú–µ–Ω—ñ –≤–∑–∞–≥–∞–ª—ñ-—Ç–æ —Ç–µ–∂ –Ω–µ —Å–æ–ª–æ–¥–∫–æ –ø–æ—Å—Ç—ñ–π–Ω–æ –≤–∞–º –ø–æ–ø—É –º—ñ—Ä—è—Ç–∏. –í—Å–µ, –¥—Ä—É–∂–æ–∫, —Ç–µ–ø–µ—Ä —Ç–∏ –º–µ–Ω–µ –Ω–µ –±—É–¥–µ—à –∑–∞–π–æ–±—É–≤–∞—Ç–∏ ‚Äî —Ç–∏ –≤ –º—É—Ç—ñ." % first_name)
                else:
                    await message.reply("%s, –¥—Ä—É–∂–æ–∫, —Ç–∏ –≤–∂–µ –Ω–∞–≥—Ä–∞–≤—Å—è, —à—É—Ä—É–π –∑–≤—ñ–¥—Å–∏." % first_name)

        db.commit()
        db.close()


@dp.message_handler(lambda message: message.text[:3] == "/bl")
async def ass(message: types.Message):
    if message.from_user["id"] in config.SUPER_USERS:
        group_id = message.text[4:]

        if group_id == "":
            await message.reply("–¢–∏ –∑–∞–±—É–≤ –≤–≤–µ—Å—Ç–∏ ID –≥—Ä—É–ø–ø–∏!")
        elif len(group_id) < 5:
            await message.reply("–ù–µ–ø–æ–≤–Ω–∏–π ID –≥—Ä—É–ø–ø–∏!")
        else:
            db = sqlite3.connect("list")
            cursor = db.execute("""
                SELECT * FROM `%s` WHERE blacklisted=1
            """ % group_id)
            users_data = cursor.fetchall()
            db.close()

            if not users_data:
                await message.reply("–ù–µ–º–∞ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤!")
            else:
                output_message = "ID : USERNAME : NAME\n\n"

                for user_data in users_data:
                    output_message += "{0} : {1} : {2}\n".format(user_data[0], user_data[1], user_data[2])

                await message.reply(output_message)


@dp.message_handler(lambda message: message.text[:3] == "/ub")
async def unban(message: types.Message):
    if message.from_user["id"] in config.SUPER_USERS:
        id = message.text[4:].strip(" ")

        if not id:
            await message.reply("–¢–∏ –∑–∞–±—É–≤ —É–≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –ø—ñ–¥–æ—Ä–∞!")
        else:
            db = sqlite3.connect("list")
            db.execute("""
                UPDATE `users` SET blacklisted=0, spamcount=0 WHERE user_id={0}
            """.format(id))

            db.commit()
            db.close()

            await message.reply("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {0} –º–æ–∂–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥—Ä–∏!".format(id))


@dp.message_handler(commands=["show_reports"])
async def show_reports(message: types.Message):
    if message.from_user["id"] in config.SUPER_USERS:
        db = sqlite3.connect("list")
        cursor = db.execute("""
            SELECT * FROM `reports`
        """)

        reports = cursor.fetchall()

        if not reports:
            await message.reply("–©–µ –Ω–µ–º–∞ –∑–≤—ñ—Ç—ñ–≤!")
        else:
            output_message = "GROUP_ID : USER_ID : USERNAME : NAME : MESSAGE\n\n"
            for report in reports:
                output_message += "‚õîÔ∏è{0} : {1} : {2} : {3}\n      {3}\n\n".format(*report)

            db.close()

            await message.reply(output_message)


@dp.message_handler(commands=["clear_reports"])
async def clear_reports(message: types.Message):
    if message.from_user["id"] in config.SUPER_USERS:
        db = sqlite3.connect("list")
        db.execute("""
            DELETE FROM `reports`
        """)
        db.commit()
        db.close()

        await message.reply("–ó–≤—ñ—Ç–∏ –ø–æ–≤–Ω—ñ—Å—Ç—é –æ—á–∏—â–µ–Ω—ñ!")


@dp.message_handler(commands=["statistic"])
async def statistic(message: types.Message):
    db = sqlite3.connect("list")
    try:
        cursor = db.execute("""
            SELECT * FROM `users` ORDER BY length DESC
        """)
        users_data = cursor.fetchall()
        db.close()
    except sqlite3.OperationalError:
        await message.reply("–ù–µ–º–∞ –≥—Ä–∞–≤—Ü—ñ–≤! –°—Ç–∞–Ω—å –ø–µ—Ä—à–∏–º!")
        return

    if not users_data:
        await message.reply("–ù–µ–º–∞ –≥—Ä–∞–≤—Ü—ñ–≤! –°—Ç–∞–Ω—å –ø–µ—Ä—à–∏–º!")
    else:
        i = 1
        output_message = "–†–µ–π—Ç–∏–Ω–≥ –≥—Ä–∞–≤—Ü—ñ–≤:\n\n"

        emojis = ["üëë ", "ü•á ", "ü•à ", "ü•â ", "üòà ", "üòá"]

        for user_data in users_data:
            try:
                output_message += emojis[i-1]
            except IndexError:
                pass
            if user_data[6]:
                output_message += "{0}. {1} –∑–∞–ª–∏—à–∏–≤—Å—è –±–µ–∑ –¥—É–ø–∏ —á–µ—Ä–µ–∑ —Å–ø–∞–º\n".format(i, user_data[2])
            else:
                if not user_data[3]:
                    output_message += "{0}. {1} ‚Äî –Ω–µ –º–∞—î —Å—ñ–¥–Ω–∏—á–∫–∏\n".format(i, user_data[2], user_data[3])
                else:
                    output_message += "{0}. {1} ‚Äî {2} —Å–º\n".format(i, user_data[2], user_data[3])
                i += 1

        await message.reply(output_message)


@dp.message_handler(commands=["leave"])
async def leave(message: types.Message):
    db = sqlite3.connect("list")

    cursor = db.execute("""
    SELECT * FROM `users` WHERE user_id={0}
    """.format(message.from_user["id"]))
    ass_info = cursor.fetchone()
    if not ass_info:
        await message.reply("–¢–∏ –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–æ–≤–∞–Ω–∏–π —É –≥—Ä—ñ!")
    else:
        if not ass_info[6]:
            db.execute("""
                DELETE FROM `users` WHERE user_id={0}
            """.format(message.from_user["id"]))
            await message.reply("–¢–∏ –ø–æ–∫–∏–Ω—É–≤ –≥—Ä—É! –®–∫–æ–¥–∞ —Ç–∞–∫–∏–π –≥–∞—Ä–Ω–∏–π –∑–∞–¥.")
        else:
            await message.reply("–ù—ñ, —Ç–∞–∫–µ –Ω–µ –ø—Ä–æ–∫–∞–Ω–∞—î üòè")
    db.commit()
    db.close()

"""
@dp.message_handler(lambda message: "/slap" in message.text)
async def slap(message: types.Message):
    username = message.text[6:]

    db = sqlite3.connect("list")
    cursor = db.execute("SELECT * FROM `users` WHERE username={0}".format(username))

    await message.reply(cursor.fetchone())

    db.commit()
    db.close()
"""


@dp.message_handler(commands=["menu"])
async def menu(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)

    keyboard.row(
        types.KeyboardButton(text="/ass"),
        types.KeyboardButton(text="/leave"),
    )

    keyboard.row(
        types.KeyboardButton(text="/help"),
        types.KeyboardButton(text="/statistic")
    )

    await message.reply("–ó–≤–∏—á–∞–π–Ω–æ, –¥—Ä—É–∂–µ: ", reply_markup=keyboard)


@dp.message_handler(commands=["help"])
async def help(message: types.Message):
    await message.reply(content["help"])


@dp.message_handler(commands=["admin_help"])
async def menu(message: types.Message):
    if message.from_user["id"] in config.SUPER_USERS:
        await message.reply(content["admin_help"])


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
